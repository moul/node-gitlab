// Generated by CoffeeScript 1.7.1
var Table, checkOptions, configFilePath, fs, gitlab, gitlabDircPath, makeTableByData, makeTableByProject, makeTableByUser, nconf, path, requireOrGetGitlab;

checkOptions = function() {
  if (!nconf.get("url")) {
    console.log("You should set url by 'gitlab --url http://example.com' ");
    return false;
  }
  if (!nconf.get("token")) {
    console.log("You should set token by 'gitlab --token abcdefghij123456' ");
    return false;
  }
  return true;
};

makeTableByData = function(data, table_head) {
  var key, raw, table, _i, _len;
  if (table_head == null) {
    table_head = [];
    for (key in data) {
      if (key !== "id") {
        table_head.push(key);
      } else {
        table_head.unshift(key);
      }
    }
  }
  table = new Table({
    head: table_head.concat()
  });
  table_head.shift();
  raw = {};
  raw[data.id] = [];
  for (_i = 0, _len = table_head.length; _i < _len; _i++) {
    key = table_head[_i];
    raw[data.id].push(data[key] || "");
  }
  table.push(raw);
  return console.log(table.toString());
};

makeTableByUser = function(data) {
  return makeTableByData(data, ["id", "name", "username", "state", "email", "created_at"]);
};

makeTableByProject = function(project) {
  var key, map, raw, table, _i, _len;
  table = new Table({
    head: ["key", "value"]
  });
  map = [];
  for (key in project) {
    if (key !== "id") {
      map.push(key);
    } else {
      map.unshift(key);
    }
  }
  for (_i = 0, _len = map.length; _i < _len; _i++) {
    key = map[_i];
    raw = {};
    if (key !== "namespace") {
      raw[key] = [project[key] || ""];
      table.push(raw);
    }
  }
  console.log(table.toString());
};

nconf = require("nconf");

Table = require("cli-table");

fs = require("fs");

path = require("path");

gitlabDircPath = path.join(process.env[(process.platform === "win32" ? "USERPROFILE" : "HOME")], ".gitlab");

if (!fs.existsSync(gitlabDircPath)) {
  fs.mkdirSync(gitlabDircPath);
}

configFilePath = path.join(gitlabDircPath, "config.json");

nconf.file({
  file: configFilePath
});

gitlab = null;

requireOrGetGitlab = function() {
  if (gitlab != null) {
    return gitlab;
  } else {
    if (checkOptions()) {
      gitlab = require("gitlab")({
        url: nconf.get("url"),
        token: nconf.get("token")
      });
      return gitlab;
    }
  }
};

exports.users = {
  all: function() {
    return requireOrGetGitlab().users.all(function(users) {
      var key, raw, table, table_head, user, _i, _j, _len, _len1;
      if (!users.length) {
        return;
      }
      users.sort(function(user1, user2) {
        return parseInt(user1.id) - parseInt(user2.id);
      });
      table_head = [];
      for (key in users[0]) {
        if (key !== "id") {
          table_head.push(key);
        } else {
          table_head.unshift(key);
        }
      }
      table = new Table({
        head: table_head.concat()
      });
      table_head.shift();
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        raw = {};
        raw[user.id] = [];
        for (_j = 0, _len1 = table_head.length; _j < _len1; _j++) {
          key = table_head[_j];
          raw[user.id].push(user[key] || "");
        }
        table.push(raw);
      }
      console.log(table.toString());
    });
  },
  current: function() {
    requireOrGetGitlab().users.current(makeTableByUser);
  },
  show: function(userId) {
    requireOrGetGitlab().users.show(userId, makeTableByUser);
  }
};

exports.projects = {
  all: function() {
    return requireOrGetGitlab().projects.all(function(projects) {
      var project, _i, _len;
      if (!projects.length) {
        return;
      }
      projects.sort(function(project1, project2) {
        return parseInt(project1.id) - parseInt(project2.id);
      });
      for (_i = 0, _len = projects.length; _i < _len; _i++) {
        project = projects[_i];
        makeTableByProject(project);
      }
    });
  },
  show: function(userId) {
    requireOrGetGitlab().projects.show(userId, makeTableByProject);
  },
  members: {
    list: function(projectId) {
      return requireOrGetGitlab().projects.members.list(projectId, function(members) {
        var member, _i, _len;
        if (!members.length) {
          return;
        }
        for (_i = 0, _len = members.length; _i < _len; _i++) {
          member = members[_i];
          makeTableByData(member);
        }
      });
    }
  }
};

exports.issues = {
  all: function() {
    return requireOrGetGitlab().issues.all(function(issues) {
      var issue, _i, _len;
      if (!issues.length) {
        return;
      }
      issues.sort(function(issue1, issue2) {
        return parseInt(issue1.id) - parseInt(issue2.id);
      });
      for (_i = 0, _len = issues.length; _i < _len; _i++) {
        issue = issues[_i];
        makeTableByData(issue);
      }
    });
  }
};

exports.url = function(url) {
  if (url != null) {
    nconf.set("url", url);
    nconf.save();
    return console.log("Save url");
  } else {
    return console.log(nconf.get("url"));
  }
};

exports.token = function(token) {
  if (token != null) {
    nconf.set("token", token);
    nconf.save();
    return console.log("Save token");
  } else {
    return console.log(nconf.get("token"));
  }
};

exports.getOption = function() {
  console.log("url: ", nconf.get("url"));
  return console.log("token: ", nconf.get("token"));
};

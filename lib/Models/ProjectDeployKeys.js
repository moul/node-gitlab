// Generated by CoffeeScript 1.6.3
(function() {
  var BaseModel, ProjectKeys, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('../BaseModel');

  ProjectKeys = (function(_super) {
    __extends(ProjectKeys, _super);

    function ProjectKeys() {
      this.addKey = __bind(this.addKey, this);
      this.getKey = __bind(this.getKey, this);
      this.listKeys = __bind(this.listKeys, this);
      _ref = ProjectKeys.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ProjectKeys.prototype.listKeys = function(projectId, fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectKeys::listKeys()");
      return this.get("projects/" + (parseInt(projectId)) + "/keys", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    ProjectKeys.prototype.getKey = function(projectId, keyId, fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectKeys::getKey()");
      return this.get("projects/" + (parseInt(projectId)) + "/keys/" + (parseInt(keyId)), function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    ProjectKeys.prototype.addKey = function(projectId, params, fn) {
      var _this = this;
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("ProjectKeys::addKey()");
      return this.post("projects/" + (parseInt(projectId)) + "/keys", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return ProjectKeys;

  })(BaseModel);

  module.exports = function(client) {
    return new ProjectKeys(client);
  };

}).call(this);
